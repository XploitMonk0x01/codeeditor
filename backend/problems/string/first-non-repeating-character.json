{
  "title": "First Non-Repeating Character",
  "description": "Find the first non-repeating character in a string.\n\nReturn the character itself. If none exists, return a space (' ').",
  "difficulty": "easy",
  "tags": "string",
  "visibleTestCases": [
    {
      "input": "\"leetcode\"",
      "output": "\"l\"",
      "explanation": "l is the first non-repeating character"
    },
    {
      "input": "\"aabb\"",
      "output": "\" \"",
      "explanation": "all characters repeat"
    }
  ],
  "hiddenTestCases": [
    {
      "input": "\"swiss\"",
      "output": "\"w\"",
      "explanation": "w is the first non-repeating character"
    },
    {
      "input": "\"success\"",
      "output": "\"u\"",
      "explanation": "u is the first non-repeating character"
    },
    {
      "input": "\"zzz\"",
      "output": "\" \"",
      "explanation": "all characters repeat"
    }
  ],
  "startCode": [
    {
      "language": "JavaScript",
      "initialCode": "function firstUniqueChar(s) {\n    // TODO: Find first non-repeating character\n    return ' ';\n}"
    },
    {
      "language": "Java",
      "initialCode": "public static char firstUniqueChar(String s) {\n    // TODO: Find first non-repeating character\n    return ' ';\n}"
    },
    {
      "language": "C++",
      "initialCode": "char firstUniqueChar(string s) {\n    // TODO: Find first non-repeating character\n    return ' ';\n}"
    }
  ],
  "referenceSolution": [
    {
      "language": "JavaScript",
      "completeCode": "function firstUniqueChar(s) {\n    let freq = {};\n    for (let c of s) freq[c] = (freq[c] || 0) + 1;\n    for (let c of s) if (freq[c] === 1) return c;\n    return ' ';\n}"
    },
    {
      "language": "Java",
      "completeCode": "public static char firstUniqueChar(String s) {\n    int[] freq = new int[256];\n    for (char c : s.toCharArray()) freq[c]++;\n    for (char c : s.toCharArray()) if (freq[c] == 1) return c;\n    return ' ';\n}"
    },
    {
      "language": "C++",
      "completeCode": "char firstUniqueChar(string s) {\n    unordered_map<char,int> freq;\n    for (char c : s) freq[c]++;\n    for (char c : s) if (freq[c] == 1) return c;\n    return ' ';\n}"
    }
  ]
}
